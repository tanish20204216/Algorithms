class rollingHash{
        public:
        vector<int>hash;
        vector<int>power_p;
        vector<int>inv;
        string s;
        int n;
        int p;
        int mod;
        rollingHash(string str,int prime,int modular)
        {
            p=prime;
            mod=modular;
            s=str;
            n=s.size();
            hash.resize(n);
            power_p.resize(n);
            inv.resize(n);
        }
        int pow(int a,int b)
        {
            if(b==0) return 1;
            if(b%2==0)
            {
                int temp=pow(a,b/2);
                return (1LL*temp*temp)%mod;
            }
            return (1LL*p*pow(a,b-1))%mod;
        }
        void build()
        {
            power_p[0]=1;
            for(int i=1;i<n;i++) power_p[i]=(1LL*p*power_p[i-1])%mod;
            hash[0]=s[0]-'a'+1;
            for(int i=1;i<n;i++) hash[i]=((1LL*power_p[i]*(s[i]-'a'+1))%mod+hash[i-1])%mod;
            inv[n-1]=pow(power_p[n-1],mod-2);
            for(int i=n-2;i>=0;i--) inv[i]=(1LL*p*inv[i+1])%mod;
        }
        int get_hash(int i,int j)
        {
            int prev=0;
            if(i-1>=0) prev=hash[i-1];
            return (1LL*(hash[j]-prev+mod)%mod*inv[i])%mod;
        }
    };
