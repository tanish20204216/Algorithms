
//  code for summmation of array from ind1 to ind2



class segementTree{
    public:
    vector<int>seg,lazy;
    segementTree(int n)
    {
        seg.resize(4*n);
        lazy.resize(4*n);
    }
    void build(int ind,int low,int high,vector<int>&arr)
    {
        if(low==high)
        {
            seg[ind]=arr[low];
            return;
        }
        int mid=low+(high-low)/2;
        build(2*ind+1,low,mid,arr);
        build(2*ind+2,mid+1,high,arr);
        seg[ind]=seg[2*ind+1]+seg[2*ind+2];
    }
    void update(int ind,int low,int high,int l,int r,int val)
    {
        if(lazy[ind]!=0)
        {
            seg[ind]+=(high-low+1)*lazy[ind];
            if(low!=high)
            {
               lazy[2*ind+1]+=lazy[ind];
               lazy[2*ind+2]+=lazy[ind];
            }
            lazy[ind]=0;
        }
        
        if(r<low||l>high) return;
        if(low>=l&&high<=r)
        {
            seg[ind]+=(high-low+1)*val;
            lazy[2*ind+1]+=val;
            lazy[2*ind+2]+=val;
            return;
        }
        int mid=low+(high-low)/2;
        update(2*ind+1,low,mid,l,r,val);
        update(2*ind+2,mid+1,high,l,r,val);
        seg[ind]=seg[2*ind+1]+seg[2*ind+2];
    }
    int get(int ind,int low,int high,int l,int r)
    {
        if(lazy[ind]!=0)
        {
            seg[ind]+=(high-low+1)*lazy[ind];
            if(low!=high)
            {
                lazy[2*ind+1]+=lazy[ind];
                lazy[2*ind+2]+=lazy[ind];
            }
            lazy[ind]=0;
        }
        if(low>r||high<l) return 0;
        if(low>=l&&high<=r) return seg[ind];
        int mid=low+(high-low)/2;
        int sum1=get(2*ind+1,low,mid,l,r);
        int sum2=get(2*ind+2,mid+1,high,l,r);
        return sum1+sum2;
    }
};
